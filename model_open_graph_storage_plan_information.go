/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphStoragePlanInformation struct for OpenGraphStoragePlanInformation
type OpenGraphStoragePlanInformation struct {
	// Indicates if there are higher storage quota plans available. Read-only.
	UpgradeAvailable *bool `json:"upgradeAvailable,omitempty"`
}

// NewOpenGraphStoragePlanInformation instantiates a new OpenGraphStoragePlanInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphStoragePlanInformation() *OpenGraphStoragePlanInformation {
	this := OpenGraphStoragePlanInformation{}
	return &this
}

// NewOpenGraphStoragePlanInformationWithDefaults instantiates a new OpenGraphStoragePlanInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphStoragePlanInformationWithDefaults() *OpenGraphStoragePlanInformation {
	this := OpenGraphStoragePlanInformation{}
	return &this
}

// GetUpgradeAvailable returns the UpgradeAvailable field value if set, zero value otherwise.
func (o *OpenGraphStoragePlanInformation) GetUpgradeAvailable() bool {
	if o == nil || o.UpgradeAvailable == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeAvailable
}

// GetUpgradeAvailableOk returns a tuple with the UpgradeAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphStoragePlanInformation) GetUpgradeAvailableOk() (*bool, bool) {
	if o == nil || o.UpgradeAvailable == nil {
		return nil, false
	}
	return o.UpgradeAvailable, true
}

// HasUpgradeAvailable returns a boolean if a field has been set.
func (o *OpenGraphStoragePlanInformation) HasUpgradeAvailable() bool {
	if o != nil && o.UpgradeAvailable != nil {
		return true
	}

	return false
}

// SetUpgradeAvailable gets a reference to the given bool and assigns it to the UpgradeAvailable field.
func (o *OpenGraphStoragePlanInformation) SetUpgradeAvailable(v bool) {
	o.UpgradeAvailable = &v
}

func (o OpenGraphStoragePlanInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradeAvailable != nil {
		toSerialize["upgradeAvailable"] = o.UpgradeAvailable
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphStoragePlanInformation struct {
	value *OpenGraphStoragePlanInformation
	isSet bool
}

func (v NullableOpenGraphStoragePlanInformation) Get() *OpenGraphStoragePlanInformation {
	return v.value
}

func (v *NullableOpenGraphStoragePlanInformation) Set(val *OpenGraphStoragePlanInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphStoragePlanInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphStoragePlanInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphStoragePlanInformation(val *OpenGraphStoragePlanInformation) *NullableOpenGraphStoragePlanInformation {
	return &NullableOpenGraphStoragePlanInformation{value: val, isSet: true}
}

func (v NullableOpenGraphStoragePlanInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphStoragePlanInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


