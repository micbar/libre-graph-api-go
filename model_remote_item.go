/*
Libre Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v0.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
	"time"
)

// RemoteItem Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
type RemoteItem struct {
	CreatedBy *IdentitySet `json:"createdBy,omitempty"`
	// Date and time of item creation. Read-only.
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	File *OpenGraphFile `json:"file,omitempty"`
	FileSystemInfo *FileSystemInfo `json:"fileSystemInfo,omitempty"`
	Folder *Folder `json:"folder,omitempty"`
	// Unique identifier for the remote item in its drive. Read-only.
	Id NullableString `json:"id,omitempty"`
	Image *Image `json:"image,omitempty"`
	LastModifiedBy *IdentitySet `json:"lastModifiedBy,omitempty"`
	// Date and time the item was last modified. Read-only.
	LastModifiedDateTime NullableTime `json:"lastModifiedDateTime,omitempty"`
	// Optional. Filename of the remote item. Read-only.
	Name NullableString `json:"name,omitempty"`
	ParentReference *ItemReference `json:"parentReference,omitempty"`
	Shared *Shared `json:"shared,omitempty"`
	// Size of the remote item. Read-only.
	Size NullableInt64 `json:"size,omitempty"`
	SpecialFolder *SpecialFolder `json:"specialFolder,omitempty"`
	// DAV compatible URL for the item.
	WebDavUrl NullableString `json:"webDavUrl,omitempty"`
	// URL that displays the resource in the browser. Read-only.
	WebUrl NullableString `json:"webUrl,omitempty"`
}

// NewRemoteItem instantiates a new RemoteItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteItem() *RemoteItem {
	this := RemoteItem{}
	return &this
}

// NewRemoteItemWithDefaults instantiates a new RemoteItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteItemWithDefaults() *RemoteItem {
	this := RemoteItem{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RemoteItem) GetCreatedBy() IdentitySet {
	if o == nil || o.CreatedBy == nil {
		var ret IdentitySet
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetCreatedByOk() (*IdentitySet, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RemoteItem) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given IdentitySet and assigns it to the CreatedBy field.
func (o *RemoteItem) SetCreatedBy(v IdentitySet) {
	o.CreatedBy = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *RemoteItem) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *RemoteItem) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *RemoteItem) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *RemoteItem) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *RemoteItem) GetFile() OpenGraphFile {
	if o == nil || o.File == nil {
		var ret OpenGraphFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetFileOk() (*OpenGraphFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *RemoteItem) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given OpenGraphFile and assigns it to the File field.
func (o *RemoteItem) SetFile(v OpenGraphFile) {
	o.File = &v
}

// GetFileSystemInfo returns the FileSystemInfo field value if set, zero value otherwise.
func (o *RemoteItem) GetFileSystemInfo() FileSystemInfo {
	if o == nil || o.FileSystemInfo == nil {
		var ret FileSystemInfo
		return ret
	}
	return *o.FileSystemInfo
}

// GetFileSystemInfoOk returns a tuple with the FileSystemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetFileSystemInfoOk() (*FileSystemInfo, bool) {
	if o == nil || o.FileSystemInfo == nil {
		return nil, false
	}
	return o.FileSystemInfo, true
}

// HasFileSystemInfo returns a boolean if a field has been set.
func (o *RemoteItem) HasFileSystemInfo() bool {
	if o != nil && o.FileSystemInfo != nil {
		return true
	}

	return false
}

// SetFileSystemInfo gets a reference to the given FileSystemInfo and assigns it to the FileSystemInfo field.
func (o *RemoteItem) SetFileSystemInfo(v FileSystemInfo) {
	o.FileSystemInfo = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *RemoteItem) GetFolder() Folder {
	if o == nil || o.Folder == nil {
		var ret Folder
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetFolderOk() (*Folder, bool) {
	if o == nil || o.Folder == nil {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *RemoteItem) HasFolder() bool {
	if o != nil && o.Folder != nil {
		return true
	}

	return false
}

// SetFolder gets a reference to the given Folder and assigns it to the Folder field.
func (o *RemoteItem) SetFolder(v Folder) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RemoteItem) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *RemoteItem) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RemoteItem) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RemoteItem) UnsetId() {
	o.Id.Unset()
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *RemoteItem) GetImage() Image {
	if o == nil || o.Image == nil {
		var ret Image
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetImageOk() (*Image, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *RemoteItem) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given Image and assigns it to the Image field.
func (o *RemoteItem) SetImage(v Image) {
	o.Image = &v
}

// GetLastModifiedBy returns the LastModifiedBy field value if set, zero value otherwise.
func (o *RemoteItem) GetLastModifiedBy() IdentitySet {
	if o == nil || o.LastModifiedBy == nil {
		var ret IdentitySet
		return ret
	}
	return *o.LastModifiedBy
}

// GetLastModifiedByOk returns a tuple with the LastModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetLastModifiedByOk() (*IdentitySet, bool) {
	if o == nil || o.LastModifiedBy == nil {
		return nil, false
	}
	return o.LastModifiedBy, true
}

// HasLastModifiedBy returns a boolean if a field has been set.
func (o *RemoteItem) HasLastModifiedBy() bool {
	if o != nil && o.LastModifiedBy != nil {
		return true
	}

	return false
}

// SetLastModifiedBy gets a reference to the given IdentitySet and assigns it to the LastModifiedBy field.
func (o *RemoteItem) SetLastModifiedBy(v IdentitySet) {
	o.LastModifiedBy = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime.Get()
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetLastModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModifiedDateTime.Get(), o.LastModifiedDateTime.IsSet()
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *RemoteItem) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime.IsSet() {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given NullableTime and assigns it to the LastModifiedDateTime field.
func (o *RemoteItem) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime.Set(&v)
}
// SetLastModifiedDateTimeNil sets the value for LastModifiedDateTime to be an explicit nil
func (o *RemoteItem) SetLastModifiedDateTimeNil() {
	o.LastModifiedDateTime.Set(nil)
}

// UnsetLastModifiedDateTime ensures that no value is present for LastModifiedDateTime, not even an explicit nil
func (o *RemoteItem) UnsetLastModifiedDateTime() {
	o.LastModifiedDateTime.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RemoteItem) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RemoteItem) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RemoteItem) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RemoteItem) UnsetName() {
	o.Name.Unset()
}

// GetParentReference returns the ParentReference field value if set, zero value otherwise.
func (o *RemoteItem) GetParentReference() ItemReference {
	if o == nil || o.ParentReference == nil {
		var ret ItemReference
		return ret
	}
	return *o.ParentReference
}

// GetParentReferenceOk returns a tuple with the ParentReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetParentReferenceOk() (*ItemReference, bool) {
	if o == nil || o.ParentReference == nil {
		return nil, false
	}
	return o.ParentReference, true
}

// HasParentReference returns a boolean if a field has been set.
func (o *RemoteItem) HasParentReference() bool {
	if o != nil && o.ParentReference != nil {
		return true
	}

	return false
}

// SetParentReference gets a reference to the given ItemReference and assigns it to the ParentReference field.
func (o *RemoteItem) SetParentReference(v ItemReference) {
	o.ParentReference = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *RemoteItem) GetShared() Shared {
	if o == nil || o.Shared == nil {
		var ret Shared
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetSharedOk() (*Shared, bool) {
	if o == nil || o.Shared == nil {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *RemoteItem) HasShared() bool {
	if o != nil && o.Shared != nil {
		return true
	}

	return false
}

// SetShared gets a reference to the given Shared and assigns it to the Shared field.
func (o *RemoteItem) SetShared(v Shared) {
	o.Shared = &v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetSize() int64 {
	if o == nil || o.Size.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *RemoteItem) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *RemoteItem) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *RemoteItem) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *RemoteItem) UnsetSize() {
	o.Size.Unset()
}

// GetSpecialFolder returns the SpecialFolder field value if set, zero value otherwise.
func (o *RemoteItem) GetSpecialFolder() SpecialFolder {
	if o == nil || o.SpecialFolder == nil {
		var ret SpecialFolder
		return ret
	}
	return *o.SpecialFolder
}

// GetSpecialFolderOk returns a tuple with the SpecialFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteItem) GetSpecialFolderOk() (*SpecialFolder, bool) {
	if o == nil || o.SpecialFolder == nil {
		return nil, false
	}
	return o.SpecialFolder, true
}

// HasSpecialFolder returns a boolean if a field has been set.
func (o *RemoteItem) HasSpecialFolder() bool {
	if o != nil && o.SpecialFolder != nil {
		return true
	}

	return false
}

// SetSpecialFolder gets a reference to the given SpecialFolder and assigns it to the SpecialFolder field.
func (o *RemoteItem) SetSpecialFolder(v SpecialFolder) {
	o.SpecialFolder = &v
}

// GetWebDavUrl returns the WebDavUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetWebDavUrl() string {
	if o == nil || o.WebDavUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.WebDavUrl.Get()
}

// GetWebDavUrlOk returns a tuple with the WebDavUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetWebDavUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebDavUrl.Get(), o.WebDavUrl.IsSet()
}

// HasWebDavUrl returns a boolean if a field has been set.
func (o *RemoteItem) HasWebDavUrl() bool {
	if o != nil && o.WebDavUrl.IsSet() {
		return true
	}

	return false
}

// SetWebDavUrl gets a reference to the given NullableString and assigns it to the WebDavUrl field.
func (o *RemoteItem) SetWebDavUrl(v string) {
	o.WebDavUrl.Set(&v)
}
// SetWebDavUrlNil sets the value for WebDavUrl to be an explicit nil
func (o *RemoteItem) SetWebDavUrlNil() {
	o.WebDavUrl.Set(nil)
}

// UnsetWebDavUrl ensures that no value is present for WebDavUrl, not even an explicit nil
func (o *RemoteItem) UnsetWebDavUrl() {
	o.WebDavUrl.Unset()
}

// GetWebUrl returns the WebUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteItem) GetWebUrl() string {
	if o == nil || o.WebUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.WebUrl.Get()
}

// GetWebUrlOk returns a tuple with the WebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteItem) GetWebUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebUrl.Get(), o.WebUrl.IsSet()
}

// HasWebUrl returns a boolean if a field has been set.
func (o *RemoteItem) HasWebUrl() bool {
	if o != nil && o.WebUrl.IsSet() {
		return true
	}

	return false
}

// SetWebUrl gets a reference to the given NullableString and assigns it to the WebUrl field.
func (o *RemoteItem) SetWebUrl(v string) {
	o.WebUrl.Set(&v)
}
// SetWebUrlNil sets the value for WebUrl to be an explicit nil
func (o *RemoteItem) SetWebUrlNil() {
	o.WebUrl.Set(nil)
}

// UnsetWebUrl ensures that no value is present for WebUrl, not even an explicit nil
func (o *RemoteItem) UnsetWebUrl() {
	o.WebUrl.Unset()
}

func (o RemoteItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.FileSystemInfo != nil {
		toSerialize["fileSystemInfo"] = o.FileSystemInfo
	}
	if o.Folder != nil {
		toSerialize["folder"] = o.Folder
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.LastModifiedBy != nil {
		toSerialize["lastModifiedBy"] = o.LastModifiedBy
	}
	if o.LastModifiedDateTime.IsSet() {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ParentReference != nil {
		toSerialize["parentReference"] = o.ParentReference
	}
	if o.Shared != nil {
		toSerialize["shared"] = o.Shared
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.SpecialFolder != nil {
		toSerialize["specialFolder"] = o.SpecialFolder
	}
	if o.WebDavUrl.IsSet() {
		toSerialize["webDavUrl"] = o.WebDavUrl.Get()
	}
	if o.WebUrl.IsSet() {
		toSerialize["webUrl"] = o.WebUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteItem struct {
	value *RemoteItem
	isSet bool
}

func (v NullableRemoteItem) Get() *RemoteItem {
	return v.value
}

func (v *NullableRemoteItem) Set(val *RemoteItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteItem(val *RemoteItem) *NullableRemoteItem {
	return &NullableRemoteItem{value: val, isSet: true}
}

func (v NullableRemoteItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


