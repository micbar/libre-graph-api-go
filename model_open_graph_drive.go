/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphDrive struct for OpenGraphDrive
type OpenGraphDrive struct {
	OpenGraphBaseItem
	// Describes the type of drive represented by this resource. Values are \"personal\" for users home spaces, \"projectSpace\" or \"shares\". Read-only.
	DriveType *string `json:"driveType,omitempty"`
	// Describes the status of the drive.
	OCDriveStatus *string `json:"oCDriveStatus,omitempty"`
	// Optional. The user account that owns the drive. Read-only.
	Owner *OpenGraphIdentitySet `json:"owner,omitempty"`
	// Optional. The user account that owns the drive.
	OCCoOwner *OpenGraphIdentitySet `json:"oCCoOwner,omitempty"`
	// Optional. Information about the drive's storage space quota. Read-only.
	Quota *OpenGraphQuota `json:"quota,omitempty"`
	// All items contained in the drive. Read-only. Nullable.
	Items *[]OpenGraphDriveItem `json:"items,omitempty"`
	// The root folder of the drive. Read-only.
	Root *OpenGraphDriveItem `json:"root,omitempty"`
}

// NewOpenGraphDrive instantiates a new OpenGraphDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphDrive() *OpenGraphDrive {
	this := OpenGraphDrive{}
	return &this
}

// NewOpenGraphDriveWithDefaults instantiates a new OpenGraphDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphDriveWithDefaults() *OpenGraphDrive {
	this := OpenGraphDrive{}
	return &this
}

// GetDriveType returns the DriveType field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetDriveType() string {
	if o == nil || o.DriveType == nil {
		var ret string
		return ret
	}
	return *o.DriveType
}

// GetDriveTypeOk returns a tuple with the DriveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetDriveTypeOk() (*string, bool) {
	if o == nil || o.DriveType == nil {
		return nil, false
	}
	return o.DriveType, true
}

// HasDriveType returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasDriveType() bool {
	if o != nil && o.DriveType != nil {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given string and assigns it to the DriveType field.
func (o *OpenGraphDrive) SetDriveType(v string) {
	o.DriveType = &v
}

// GetOCDriveStatus returns the OCDriveStatus field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetOCDriveStatus() string {
	if o == nil || o.OCDriveStatus == nil {
		var ret string
		return ret
	}
	return *o.OCDriveStatus
}

// GetOCDriveStatusOk returns a tuple with the OCDriveStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetOCDriveStatusOk() (*string, bool) {
	if o == nil || o.OCDriveStatus == nil {
		return nil, false
	}
	return o.OCDriveStatus, true
}

// HasOCDriveStatus returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOCDriveStatus() bool {
	if o != nil && o.OCDriveStatus != nil {
		return true
	}

	return false
}

// SetOCDriveStatus gets a reference to the given string and assigns it to the OCDriveStatus field.
func (o *OpenGraphDrive) SetOCDriveStatus(v string) {
	o.OCDriveStatus = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetOwner() OpenGraphIdentitySet {
	if o == nil || o.Owner == nil {
		var ret OpenGraphIdentitySet
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetOwnerOk() (*OpenGraphIdentitySet, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given OpenGraphIdentitySet and assigns it to the Owner field.
func (o *OpenGraphDrive) SetOwner(v OpenGraphIdentitySet) {
	o.Owner = &v
}

// GetOCCoOwner returns the OCCoOwner field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetOCCoOwner() OpenGraphIdentitySet {
	if o == nil || o.OCCoOwner == nil {
		var ret OpenGraphIdentitySet
		return ret
	}
	return *o.OCCoOwner
}

// GetOCCoOwnerOk returns a tuple with the OCCoOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetOCCoOwnerOk() (*OpenGraphIdentitySet, bool) {
	if o == nil || o.OCCoOwner == nil {
		return nil, false
	}
	return o.OCCoOwner, true
}

// HasOCCoOwner returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOCCoOwner() bool {
	if o != nil && o.OCCoOwner != nil {
		return true
	}

	return false
}

// SetOCCoOwner gets a reference to the given OpenGraphIdentitySet and assigns it to the OCCoOwner field.
func (o *OpenGraphDrive) SetOCCoOwner(v OpenGraphIdentitySet) {
	o.OCCoOwner = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetQuota() OpenGraphQuota {
	if o == nil || o.Quota == nil {
		var ret OpenGraphQuota
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetQuotaOk() (*OpenGraphQuota, bool) {
	if o == nil || o.Quota == nil {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given OpenGraphQuota and assigns it to the Quota field.
func (o *OpenGraphDrive) SetQuota(v OpenGraphQuota) {
	o.Quota = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetItems() []OpenGraphDriveItem {
	if o == nil || o.Items == nil {
		var ret []OpenGraphDriveItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetItemsOk() (*[]OpenGraphDriveItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OpenGraphDriveItem and assigns it to the Items field.
func (o *OpenGraphDrive) SetItems(v []OpenGraphDriveItem) {
	o.Items = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetRoot() OpenGraphDriveItem {
	if o == nil || o.Root == nil {
		var ret OpenGraphDriveItem
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetRootOk() (*OpenGraphDriveItem, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given OpenGraphDriveItem and assigns it to the Root field.
func (o *OpenGraphDrive) SetRoot(v OpenGraphDriveItem) {
	o.Root = &v
}

func (o OpenGraphDrive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedOpenGraphBaseItem, errOpenGraphBaseItem := json.Marshal(o.OpenGraphBaseItem)
	if errOpenGraphBaseItem != nil {
		return []byte{}, errOpenGraphBaseItem
	}
	errOpenGraphBaseItem = json.Unmarshal([]byte(serializedOpenGraphBaseItem), &toSerialize)
	if errOpenGraphBaseItem != nil {
		return []byte{}, errOpenGraphBaseItem
	}
	if o.DriveType != nil {
		toSerialize["driveType"] = o.DriveType
	}
	if o.OCDriveStatus != nil {
		toSerialize["oCDriveStatus"] = o.OCDriveStatus
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.OCCoOwner != nil {
		toSerialize["oCCoOwner"] = o.OCCoOwner
	}
	if o.Quota != nil {
		toSerialize["quota"] = o.Quota
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphDrive struct {
	value *OpenGraphDrive
	isSet bool
}

func (v NullableOpenGraphDrive) Get() *OpenGraphDrive {
	return v.value
}

func (v *NullableOpenGraphDrive) Set(val *OpenGraphDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphDrive(val *OpenGraphDrive) *NullableOpenGraphDrive {
	return &NullableOpenGraphDrive{value: val, isSet: true}
}

func (v NullableOpenGraphDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


