/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphItemReference struct for OpenGraphItemReference
type OpenGraphItemReference struct {
	// Unique identifier of the drive instance that contains the item. Read-only.
	DriveId NullableString `json:"driveId,omitempty"`
	// Identifies the type of drive. See [drive][] resource for values. Read-only.
	DriveType NullableString `json:"driveType,omitempty"`
	// Unique identifier of the item in the drive. Read-only.
	Id NullableString `json:"id,omitempty"`
	// The name of the item being referenced. Read-only.
	Name NullableString `json:"name,omitempty"`
	// Path that can be used to navigate to the item. Read-only.
	Path NullableString `json:"path,omitempty"`
	// A unique identifier for a shared resource that can be accessed via the [Shares][] API.
	ShareId NullableString `json:"shareId,omitempty"`
}

// NewOpenGraphItemReference instantiates a new OpenGraphItemReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphItemReference() *OpenGraphItemReference {
	this := OpenGraphItemReference{}
	return &this
}

// NewOpenGraphItemReferenceWithDefaults instantiates a new OpenGraphItemReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphItemReferenceWithDefaults() *OpenGraphItemReference {
	this := OpenGraphItemReference{}
	return &this
}

// GetDriveId returns the DriveId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetDriveId() string {
	if o == nil || o.DriveId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveId.Get()
}

// GetDriveIdOk returns a tuple with the DriveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetDriveIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveId.Get(), o.DriveId.IsSet()
}

// HasDriveId returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasDriveId() bool {
	if o != nil && o.DriveId.IsSet() {
		return true
	}

	return false
}

// SetDriveId gets a reference to the given NullableString and assigns it to the DriveId field.
func (o *OpenGraphItemReference) SetDriveId(v string) {
	o.DriveId.Set(&v)
}
// SetDriveIdNil sets the value for DriveId to be an explicit nil
func (o *OpenGraphItemReference) SetDriveIdNil() {
	o.DriveId.Set(nil)
}

// UnsetDriveId ensures that no value is present for DriveId, not even an explicit nil
func (o *OpenGraphItemReference) UnsetDriveId() {
	o.DriveId.Unset()
}

// GetDriveType returns the DriveType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetDriveType() string {
	if o == nil || o.DriveType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveType.Get()
}

// GetDriveTypeOk returns a tuple with the DriveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetDriveTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveType.Get(), o.DriveType.IsSet()
}

// HasDriveType returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasDriveType() bool {
	if o != nil && o.DriveType.IsSet() {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given NullableString and assigns it to the DriveType field.
func (o *OpenGraphItemReference) SetDriveType(v string) {
	o.DriveType.Set(&v)
}
// SetDriveTypeNil sets the value for DriveType to be an explicit nil
func (o *OpenGraphItemReference) SetDriveTypeNil() {
	o.DriveType.Set(nil)
}

// UnsetDriveType ensures that no value is present for DriveType, not even an explicit nil
func (o *OpenGraphItemReference) UnsetDriveType() {
	o.DriveType.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OpenGraphItemReference) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *OpenGraphItemReference) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OpenGraphItemReference) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OpenGraphItemReference) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OpenGraphItemReference) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OpenGraphItemReference) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *OpenGraphItemReference) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *OpenGraphItemReference) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *OpenGraphItemReference) UnsetPath() {
	o.Path.Unset()
}

// GetShareId returns the ShareId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphItemReference) GetShareId() string {
	if o == nil || o.ShareId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareId.Get()
}

// GetShareIdOk returns a tuple with the ShareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphItemReference) GetShareIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareId.Get(), o.ShareId.IsSet()
}

// HasShareId returns a boolean if a field has been set.
func (o *OpenGraphItemReference) HasShareId() bool {
	if o != nil && o.ShareId.IsSet() {
		return true
	}

	return false
}

// SetShareId gets a reference to the given NullableString and assigns it to the ShareId field.
func (o *OpenGraphItemReference) SetShareId(v string) {
	o.ShareId.Set(&v)
}
// SetShareIdNil sets the value for ShareId to be an explicit nil
func (o *OpenGraphItemReference) SetShareIdNil() {
	o.ShareId.Set(nil)
}

// UnsetShareId ensures that no value is present for ShareId, not even an explicit nil
func (o *OpenGraphItemReference) UnsetShareId() {
	o.ShareId.Unset()
}

func (o OpenGraphItemReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveId.IsSet() {
		toSerialize["driveId"] = o.DriveId.Get()
	}
	if o.DriveType.IsSet() {
		toSerialize["driveType"] = o.DriveType.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.ShareId.IsSet() {
		toSerialize["shareId"] = o.ShareId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphItemReference struct {
	value *OpenGraphItemReference
	isSet bool
}

func (v NullableOpenGraphItemReference) Get() *OpenGraphItemReference {
	return v.value
}

func (v *NullableOpenGraphItemReference) Set(val *OpenGraphItemReference) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphItemReference) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphItemReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphItemReference(val *OpenGraphItemReference) *NullableOpenGraphItemReference {
	return &NullableOpenGraphItemReference{value: val, isSet: true}
}

func (v NullableOpenGraphItemReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphItemReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


