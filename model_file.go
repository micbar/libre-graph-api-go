/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// File struct for File
type File struct {
	// Hashes of the file's binary content, if available. Read-only.
	Hashes *Hashes `json:"hashes,omitempty"`
	// The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
	MimeType *string `json:"mimeType,omitempty"`
	ProcessingMetadata *bool `json:"processingMetadata,omitempty"`
}

// NewFile instantiates a new File object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFile() *File {
	this := File{}
	return &this
}

// NewFileWithDefaults instantiates a new File object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileWithDefaults() *File {
	this := File{}
	return &this
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *File) GetHashes() Hashes {
	if o == nil || o.Hashes == nil {
		var ret Hashes
		return ret
	}
	return *o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetHashesOk() (*Hashes, bool) {
	if o == nil || o.Hashes == nil {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *File) HasHashes() bool {
	if o != nil && o.Hashes != nil {
		return true
	}

	return false
}

// SetHashes gets a reference to the given Hashes and assigns it to the Hashes field.
func (o *File) SetHashes(v Hashes) {
	o.Hashes = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *File) GetMimeType() string {
	if o == nil || o.MimeType == nil {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetMimeTypeOk() (*string, bool) {
	if o == nil || o.MimeType == nil {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *File) HasMimeType() bool {
	if o != nil && o.MimeType != nil {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *File) SetMimeType(v string) {
	o.MimeType = &v
}

// GetProcessingMetadata returns the ProcessingMetadata field value if set, zero value otherwise.
func (o *File) GetProcessingMetadata() bool {
	if o == nil || o.ProcessingMetadata == nil {
		var ret bool
		return ret
	}
	return *o.ProcessingMetadata
}

// GetProcessingMetadataOk returns a tuple with the ProcessingMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *File) GetProcessingMetadataOk() (*bool, bool) {
	if o == nil || o.ProcessingMetadata == nil {
		return nil, false
	}
	return o.ProcessingMetadata, true
}

// HasProcessingMetadata returns a boolean if a field has been set.
func (o *File) HasProcessingMetadata() bool {
	if o != nil && o.ProcessingMetadata != nil {
		return true
	}

	return false
}

// SetProcessingMetadata gets a reference to the given bool and assigns it to the ProcessingMetadata field.
func (o *File) SetProcessingMetadata(v bool) {
	o.ProcessingMetadata = &v
}

func (o File) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hashes != nil {
		toSerialize["hashes"] = o.Hashes
	}
	if o.MimeType != nil {
		toSerialize["mimeType"] = o.MimeType
	}
	if o.ProcessingMetadata != nil {
		toSerialize["processingMetadata"] = o.ProcessingMetadata
	}
	return json.Marshal(toSerialize)
}

type NullableFile struct {
	value *File
	isSet bool
}

func (v NullableFile) Get() *File {
	return v.value
}

func (v *NullableFile) Set(val *File) {
	v.value = val
	v.isSet = true
}

func (v NullableFile) IsSet() bool {
	return v.isSet
}

func (v *NullableFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFile(val *File) *NullableFile {
	return &NullableFile{value: val, isSet: true}
}

func (v NullableFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


