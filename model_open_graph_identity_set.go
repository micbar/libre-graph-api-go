/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphIdentitySet struct for OpenGraphIdentitySet
type OpenGraphIdentitySet struct {
	// Optional. The application associated with this action.
	Application *OpenGraphIdentity `json:"application,omitempty"`
	// Optional. The device associated with this action.
	Device *OpenGraphIdentity `json:"device,omitempty"`
	// Optional. The user associated with this action.
	User *OpenGraphIdentity `json:"user,omitempty"`
}

// NewOpenGraphIdentitySet instantiates a new OpenGraphIdentitySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphIdentitySet() *OpenGraphIdentitySet {
	this := OpenGraphIdentitySet{}
	return &this
}

// NewOpenGraphIdentitySetWithDefaults instantiates a new OpenGraphIdentitySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphIdentitySetWithDefaults() *OpenGraphIdentitySet {
	this := OpenGraphIdentitySet{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *OpenGraphIdentitySet) GetApplication() OpenGraphIdentity {
	if o == nil || o.Application == nil {
		var ret OpenGraphIdentity
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphIdentitySet) GetApplicationOk() (*OpenGraphIdentity, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *OpenGraphIdentitySet) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given OpenGraphIdentity and assigns it to the Application field.
func (o *OpenGraphIdentitySet) SetApplication(v OpenGraphIdentity) {
	o.Application = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *OpenGraphIdentitySet) GetDevice() OpenGraphIdentity {
	if o == nil || o.Device == nil {
		var ret OpenGraphIdentity
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphIdentitySet) GetDeviceOk() (*OpenGraphIdentity, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *OpenGraphIdentitySet) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given OpenGraphIdentity and assigns it to the Device field.
func (o *OpenGraphIdentitySet) SetDevice(v OpenGraphIdentity) {
	o.Device = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *OpenGraphIdentitySet) GetUser() OpenGraphIdentity {
	if o == nil || o.User == nil {
		var ret OpenGraphIdentity
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphIdentitySet) GetUserOk() (*OpenGraphIdentity, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *OpenGraphIdentitySet) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given OpenGraphIdentity and assigns it to the User field.
func (o *OpenGraphIdentitySet) SetUser(v OpenGraphIdentity) {
	o.User = &v
}

func (o OpenGraphIdentitySet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphIdentitySet struct {
	value *OpenGraphIdentitySet
	isSet bool
}

func (v NullableOpenGraphIdentitySet) Get() *OpenGraphIdentitySet {
	return v.value
}

func (v *NullableOpenGraphIdentitySet) Set(val *OpenGraphIdentitySet) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphIdentitySet) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphIdentitySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphIdentitySet(val *OpenGraphIdentitySet) *NullableOpenGraphIdentitySet {
	return &NullableOpenGraphIdentitySet{value: val, isSet: true}
}

func (v NullableOpenGraphIdentitySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphIdentitySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


