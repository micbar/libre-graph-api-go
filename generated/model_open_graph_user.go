/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// OpenGraphUser struct for OpenGraphUser
type OpenGraphUser struct {
	OpenGraphDirectoryObject
	// true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter.
	AccountEnabled NullableBool `json:"accountEnabled,omitempty"`
	// The telephone numbers for the user. Only one number can be set for this property. Returned by default. Read-only for users synced from on-premises directory.
	BusinessPhones *[]string `json:"businessPhones,omitempty"`
	// The city in which the user is located. Returned only on $select. Supports $filter.
	City NullableString `json:"city,omitempty"`
	// The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters.Returned only on $select.
	CompanyName NullableString `json:"companyName,omitempty"`
	// The country/region in which the user is located; for example, 'US' or 'UK'. Returned only on $select. Supports $filter.
	Country NullableString `json:"country,omitempty"`
	// The date and time the user was created. The value cannot be modified and is automatically populated when the entity is created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. Property is nullable. A null value indicates that an accurate creation time couldn't be determined for the user. Returned only on $select. Read-only. Supports $filter.
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// The name for the department in which the user works. Returned only on $select. Supports $filter.
	Department NullableString `json:"department,omitempty"`
	// The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and last name. This property is required when a user is created and it cannot be cleared during updates. Returned by default. Supports $filter and $orderby.
	DisplayName NullableString `json:"displayName,omitempty"`
	// The fax number of the user. Returned only on $select.
	FaxNumber NullableString `json:"faxNumber,omitempty"`
	// The given name (first name) of the user. Returned by default. Supports $filter.
	GivenName NullableString `json:"givenName,omitempty"`
	// The time when this user last changed their password. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select. Read-only.
	LastPasswordChangeDateTime NullableTime `json:"lastPasswordChangeDateTime,omitempty"`
	// Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent, minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select.
	LegalAgeGroupClassification NullableString `json:"legalAgeGroupClassification,omitempty"`
	// The SMTP address for the user, for example, 'jeff@contoso.onowncloud.com'. Returned by default. Supports $filter and endsWith.
	Mail NullableString `json:"mail,omitempty"`
	// The mail alias for the user. This property must be specified when a user is created. Returned only on $select. Supports $filter.
	MailNickname NullableString `json:"mailNickname,omitempty"`
	// The primary cellular telephone number for the user. Returned by default. Read-only for users synced from on-premises directory.
	MobilePhone NullableString `json:"mobilePhone,omitempty"`
	// The office location in the user's place of business. Returned by default.
	OfficeLocation NullableString `json:"officeLocation,omitempty"`
	// The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Returned only on $select.
	PostalCode NullableString `json:"postalCode,omitempty"`
	// The preferred language for the user. Should follow ISO 639-1 Code; for example 'en-US'. Returned by default.
	PreferredLanguage NullableString `json:"preferredLanguage,omitempty"`
	// The state or province in the user's address. Returned only on $select. Supports $filter.
	State NullableString `json:"state,omitempty"`
	// The street address of the user's place of business. Returned only on $select.
	StreetAddress NullableString `json:"streetAddress,omitempty"`
	// The user's surname (family name or last name). Returned by default. Supports $filter.
	Surname NullableString `json:"surname,omitempty"`
	// A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: 'US', 'JP', and 'GB'. Not nullable. Returned only on $select. Supports $filter.
	UsageLocation NullableString `json:"usageLocation,omitempty"`
	// The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user's email name. The general format is alias@domain, where domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization. Returned by default. Supports $filter, $orderby, and endsWith.
	UserPrincipalName NullableString `json:"userPrincipalName,omitempty"`
	// A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Returned only on $select. Supports $filter.
	UserType NullableString `json:"userType,omitempty"`
	// A freeform text entry field for the user to describe themselves. Returned only on $select.
	AboutMe NullableString `json:"aboutMe,omitempty"`
	// The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Returned only on $select.
	Birthday *time.Time `json:"birthday,omitempty"`
	// The user's HomeDrive. Read-only.
	Drive NullableAnyOfopenGraphDrive `json:"drive,omitempty"`
	// A collection of drives available for this user. Read-only.
	Drives *[]OpenGraphDrive `json:"drives,omitempty"`
}

// NewOpenGraphUser instantiates a new OpenGraphUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphUser() *OpenGraphUser {
	this := OpenGraphUser{}
	return &this
}

// NewOpenGraphUserWithDefaults instantiates a new OpenGraphUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphUserWithDefaults() *OpenGraphUser {
	this := OpenGraphUser{}
	return &this
}

// GetAccountEnabled returns the AccountEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetAccountEnabled() bool {
	if o == nil || o.AccountEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AccountEnabled.Get()
}

// GetAccountEnabledOk returns a tuple with the AccountEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetAccountEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountEnabled.Get(), o.AccountEnabled.IsSet()
}

// HasAccountEnabled returns a boolean if a field has been set.
func (o *OpenGraphUser) HasAccountEnabled() bool {
	if o != nil && o.AccountEnabled.IsSet() {
		return true
	}

	return false
}

// SetAccountEnabled gets a reference to the given NullableBool and assigns it to the AccountEnabled field.
func (o *OpenGraphUser) SetAccountEnabled(v bool) {
	o.AccountEnabled.Set(&v)
}
// SetAccountEnabledNil sets the value for AccountEnabled to be an explicit nil
func (o *OpenGraphUser) SetAccountEnabledNil() {
	o.AccountEnabled.Set(nil)
}

// UnsetAccountEnabled ensures that no value is present for AccountEnabled, not even an explicit nil
func (o *OpenGraphUser) UnsetAccountEnabled() {
	o.AccountEnabled.Unset()
}

// GetBusinessPhones returns the BusinessPhones field value if set, zero value otherwise.
func (o *OpenGraphUser) GetBusinessPhones() []string {
	if o == nil || o.BusinessPhones == nil {
		var ret []string
		return ret
	}
	return *o.BusinessPhones
}

// GetBusinessPhonesOk returns a tuple with the BusinessPhones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphUser) GetBusinessPhonesOk() (*[]string, bool) {
	if o == nil || o.BusinessPhones == nil {
		return nil, false
	}
	return o.BusinessPhones, true
}

// HasBusinessPhones returns a boolean if a field has been set.
func (o *OpenGraphUser) HasBusinessPhones() bool {
	if o != nil && o.BusinessPhones != nil {
		return true
	}

	return false
}

// SetBusinessPhones gets a reference to the given []string and assigns it to the BusinessPhones field.
func (o *OpenGraphUser) SetBusinessPhones(v []string) {
	o.BusinessPhones = &v
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *OpenGraphUser) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *OpenGraphUser) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *OpenGraphUser) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *OpenGraphUser) UnsetCity() {
	o.City.Unset()
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetCompanyName() string {
	if o == nil || o.CompanyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompanyName.Get()
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetCompanyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompanyName.Get(), o.CompanyName.IsSet()
}

// HasCompanyName returns a boolean if a field has been set.
func (o *OpenGraphUser) HasCompanyName() bool {
	if o != nil && o.CompanyName.IsSet() {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given NullableString and assigns it to the CompanyName field.
func (o *OpenGraphUser) SetCompanyName(v string) {
	o.CompanyName.Set(&v)
}
// SetCompanyNameNil sets the value for CompanyName to be an explicit nil
func (o *OpenGraphUser) SetCompanyNameNil() {
	o.CompanyName.Set(nil)
}

// UnsetCompanyName ensures that no value is present for CompanyName, not even an explicit nil
func (o *OpenGraphUser) UnsetCompanyName() {
	o.CompanyName.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *OpenGraphUser) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *OpenGraphUser) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *OpenGraphUser) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *OpenGraphUser) UnsetCountry() {
	o.Country.Unset()
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *OpenGraphUser) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *OpenGraphUser) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *OpenGraphUser) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *OpenGraphUser) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetDepartment() string {
	if o == nil || o.Department.Get() == nil {
		var ret string
		return ret
	}
	return *o.Department.Get()
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetDepartmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Department.Get(), o.Department.IsSet()
}

// HasDepartment returns a boolean if a field has been set.
func (o *OpenGraphUser) HasDepartment() bool {
	if o != nil && o.Department.IsSet() {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given NullableString and assigns it to the Department field.
func (o *OpenGraphUser) SetDepartment(v string) {
	o.Department.Set(&v)
}
// SetDepartmentNil sets the value for Department to be an explicit nil
func (o *OpenGraphUser) SetDepartmentNil() {
	o.Department.Set(nil)
}

// UnsetDepartment ensures that no value is present for Department, not even an explicit nil
func (o *OpenGraphUser) UnsetDepartment() {
	o.Department.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *OpenGraphUser) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *OpenGraphUser) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *OpenGraphUser) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *OpenGraphUser) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetFaxNumber returns the FaxNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetFaxNumber() string {
	if o == nil || o.FaxNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.FaxNumber.Get()
}

// GetFaxNumberOk returns a tuple with the FaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetFaxNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FaxNumber.Get(), o.FaxNumber.IsSet()
}

// HasFaxNumber returns a boolean if a field has been set.
func (o *OpenGraphUser) HasFaxNumber() bool {
	if o != nil && o.FaxNumber.IsSet() {
		return true
	}

	return false
}

// SetFaxNumber gets a reference to the given NullableString and assigns it to the FaxNumber field.
func (o *OpenGraphUser) SetFaxNumber(v string) {
	o.FaxNumber.Set(&v)
}
// SetFaxNumberNil sets the value for FaxNumber to be an explicit nil
func (o *OpenGraphUser) SetFaxNumberNil() {
	o.FaxNumber.Set(nil)
}

// UnsetFaxNumber ensures that no value is present for FaxNumber, not even an explicit nil
func (o *OpenGraphUser) UnsetFaxNumber() {
	o.FaxNumber.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetGivenName() string {
	if o == nil || o.GivenName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetGivenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *OpenGraphUser) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableString and assigns it to the GivenName field.
func (o *OpenGraphUser) SetGivenName(v string) {
	o.GivenName.Set(&v)
}
// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *OpenGraphUser) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *OpenGraphUser) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetLastPasswordChangeDateTime returns the LastPasswordChangeDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetLastPasswordChangeDateTime() time.Time {
	if o == nil || o.LastPasswordChangeDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeDateTime.Get()
}

// GetLastPasswordChangeDateTimeOk returns a tuple with the LastPasswordChangeDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetLastPasswordChangeDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastPasswordChangeDateTime.Get(), o.LastPasswordChangeDateTime.IsSet()
}

// HasLastPasswordChangeDateTime returns a boolean if a field has been set.
func (o *OpenGraphUser) HasLastPasswordChangeDateTime() bool {
	if o != nil && o.LastPasswordChangeDateTime.IsSet() {
		return true
	}

	return false
}

// SetLastPasswordChangeDateTime gets a reference to the given NullableTime and assigns it to the LastPasswordChangeDateTime field.
func (o *OpenGraphUser) SetLastPasswordChangeDateTime(v time.Time) {
	o.LastPasswordChangeDateTime.Set(&v)
}
// SetLastPasswordChangeDateTimeNil sets the value for LastPasswordChangeDateTime to be an explicit nil
func (o *OpenGraphUser) SetLastPasswordChangeDateTimeNil() {
	o.LastPasswordChangeDateTime.Set(nil)
}

// UnsetLastPasswordChangeDateTime ensures that no value is present for LastPasswordChangeDateTime, not even an explicit nil
func (o *OpenGraphUser) UnsetLastPasswordChangeDateTime() {
	o.LastPasswordChangeDateTime.Unset()
}

// GetLegalAgeGroupClassification returns the LegalAgeGroupClassification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetLegalAgeGroupClassification() string {
	if o == nil || o.LegalAgeGroupClassification.Get() == nil {
		var ret string
		return ret
	}
	return *o.LegalAgeGroupClassification.Get()
}

// GetLegalAgeGroupClassificationOk returns a tuple with the LegalAgeGroupClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetLegalAgeGroupClassificationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LegalAgeGroupClassification.Get(), o.LegalAgeGroupClassification.IsSet()
}

// HasLegalAgeGroupClassification returns a boolean if a field has been set.
func (o *OpenGraphUser) HasLegalAgeGroupClassification() bool {
	if o != nil && o.LegalAgeGroupClassification.IsSet() {
		return true
	}

	return false
}

// SetLegalAgeGroupClassification gets a reference to the given NullableString and assigns it to the LegalAgeGroupClassification field.
func (o *OpenGraphUser) SetLegalAgeGroupClassification(v string) {
	o.LegalAgeGroupClassification.Set(&v)
}
// SetLegalAgeGroupClassificationNil sets the value for LegalAgeGroupClassification to be an explicit nil
func (o *OpenGraphUser) SetLegalAgeGroupClassificationNil() {
	o.LegalAgeGroupClassification.Set(nil)
}

// UnsetLegalAgeGroupClassification ensures that no value is present for LegalAgeGroupClassification, not even an explicit nil
func (o *OpenGraphUser) UnsetLegalAgeGroupClassification() {
	o.LegalAgeGroupClassification.Unset()
}

// GetMail returns the Mail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetMail() string {
	if o == nil || o.Mail.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mail.Get()
}

// GetMailOk returns a tuple with the Mail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetMailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mail.Get(), o.Mail.IsSet()
}

// HasMail returns a boolean if a field has been set.
func (o *OpenGraphUser) HasMail() bool {
	if o != nil && o.Mail.IsSet() {
		return true
	}

	return false
}

// SetMail gets a reference to the given NullableString and assigns it to the Mail field.
func (o *OpenGraphUser) SetMail(v string) {
	o.Mail.Set(&v)
}
// SetMailNil sets the value for Mail to be an explicit nil
func (o *OpenGraphUser) SetMailNil() {
	o.Mail.Set(nil)
}

// UnsetMail ensures that no value is present for Mail, not even an explicit nil
func (o *OpenGraphUser) UnsetMail() {
	o.Mail.Unset()
}

// GetMailNickname returns the MailNickname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetMailNickname() string {
	if o == nil || o.MailNickname.Get() == nil {
		var ret string
		return ret
	}
	return *o.MailNickname.Get()
}

// GetMailNicknameOk returns a tuple with the MailNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetMailNicknameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MailNickname.Get(), o.MailNickname.IsSet()
}

// HasMailNickname returns a boolean if a field has been set.
func (o *OpenGraphUser) HasMailNickname() bool {
	if o != nil && o.MailNickname.IsSet() {
		return true
	}

	return false
}

// SetMailNickname gets a reference to the given NullableString and assigns it to the MailNickname field.
func (o *OpenGraphUser) SetMailNickname(v string) {
	o.MailNickname.Set(&v)
}
// SetMailNicknameNil sets the value for MailNickname to be an explicit nil
func (o *OpenGraphUser) SetMailNicknameNil() {
	o.MailNickname.Set(nil)
}

// UnsetMailNickname ensures that no value is present for MailNickname, not even an explicit nil
func (o *OpenGraphUser) UnsetMailNickname() {
	o.MailNickname.Unset()
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetMobilePhone() string {
	if o == nil || o.MobilePhone.Get() == nil {
		var ret string
		return ret
	}
	return *o.MobilePhone.Get()
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetMobilePhoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MobilePhone.Get(), o.MobilePhone.IsSet()
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *OpenGraphUser) HasMobilePhone() bool {
	if o != nil && o.MobilePhone.IsSet() {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given NullableString and assigns it to the MobilePhone field.
func (o *OpenGraphUser) SetMobilePhone(v string) {
	o.MobilePhone.Set(&v)
}
// SetMobilePhoneNil sets the value for MobilePhone to be an explicit nil
func (o *OpenGraphUser) SetMobilePhoneNil() {
	o.MobilePhone.Set(nil)
}

// UnsetMobilePhone ensures that no value is present for MobilePhone, not even an explicit nil
func (o *OpenGraphUser) UnsetMobilePhone() {
	o.MobilePhone.Unset()
}

// GetOfficeLocation returns the OfficeLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetOfficeLocation() string {
	if o == nil || o.OfficeLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.OfficeLocation.Get()
}

// GetOfficeLocationOk returns a tuple with the OfficeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetOfficeLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficeLocation.Get(), o.OfficeLocation.IsSet()
}

// HasOfficeLocation returns a boolean if a field has been set.
func (o *OpenGraphUser) HasOfficeLocation() bool {
	if o != nil && o.OfficeLocation.IsSet() {
		return true
	}

	return false
}

// SetOfficeLocation gets a reference to the given NullableString and assigns it to the OfficeLocation field.
func (o *OpenGraphUser) SetOfficeLocation(v string) {
	o.OfficeLocation.Set(&v)
}
// SetOfficeLocationNil sets the value for OfficeLocation to be an explicit nil
func (o *OpenGraphUser) SetOfficeLocationNil() {
	o.OfficeLocation.Set(nil)
}

// UnsetOfficeLocation ensures that no value is present for OfficeLocation, not even an explicit nil
func (o *OpenGraphUser) UnsetOfficeLocation() {
	o.OfficeLocation.Unset()
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetPostalCode() string {
	if o == nil || o.PostalCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PostalCode.Get()
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PostalCode.Get(), o.PostalCode.IsSet()
}

// HasPostalCode returns a boolean if a field has been set.
func (o *OpenGraphUser) HasPostalCode() bool {
	if o != nil && o.PostalCode.IsSet() {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given NullableString and assigns it to the PostalCode field.
func (o *OpenGraphUser) SetPostalCode(v string) {
	o.PostalCode.Set(&v)
}
// SetPostalCodeNil sets the value for PostalCode to be an explicit nil
func (o *OpenGraphUser) SetPostalCodeNil() {
	o.PostalCode.Set(nil)
}

// UnsetPostalCode ensures that no value is present for PostalCode, not even an explicit nil
func (o *OpenGraphUser) UnsetPostalCode() {
	o.PostalCode.Unset()
}

// GetPreferredLanguage returns the PreferredLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetPreferredLanguage() string {
	if o == nil || o.PreferredLanguage.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredLanguage.Get()
}

// GetPreferredLanguageOk returns a tuple with the PreferredLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetPreferredLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredLanguage.Get(), o.PreferredLanguage.IsSet()
}

// HasPreferredLanguage returns a boolean if a field has been set.
func (o *OpenGraphUser) HasPreferredLanguage() bool {
	if o != nil && o.PreferredLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredLanguage gets a reference to the given NullableString and assigns it to the PreferredLanguage field.
func (o *OpenGraphUser) SetPreferredLanguage(v string) {
	o.PreferredLanguage.Set(&v)
}
// SetPreferredLanguageNil sets the value for PreferredLanguage to be an explicit nil
func (o *OpenGraphUser) SetPreferredLanguageNil() {
	o.PreferredLanguage.Set(nil)
}

// UnsetPreferredLanguage ensures that no value is present for PreferredLanguage, not even an explicit nil
func (o *OpenGraphUser) UnsetPreferredLanguage() {
	o.PreferredLanguage.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *OpenGraphUser) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *OpenGraphUser) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *OpenGraphUser) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *OpenGraphUser) UnsetState() {
	o.State.Unset()
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetStreetAddress() string {
	if o == nil || o.StreetAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.StreetAddress.Get()
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetStreetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StreetAddress.Get(), o.StreetAddress.IsSet()
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *OpenGraphUser) HasStreetAddress() bool {
	if o != nil && o.StreetAddress.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given NullableString and assigns it to the StreetAddress field.
func (o *OpenGraphUser) SetStreetAddress(v string) {
	o.StreetAddress.Set(&v)
}
// SetStreetAddressNil sets the value for StreetAddress to be an explicit nil
func (o *OpenGraphUser) SetStreetAddressNil() {
	o.StreetAddress.Set(nil)
}

// UnsetStreetAddress ensures that no value is present for StreetAddress, not even an explicit nil
func (o *OpenGraphUser) UnsetStreetAddress() {
	o.StreetAddress.Unset()
}

// GetSurname returns the Surname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetSurname() string {
	if o == nil || o.Surname.Get() == nil {
		var ret string
		return ret
	}
	return *o.Surname.Get()
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetSurnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Surname.Get(), o.Surname.IsSet()
}

// HasSurname returns a boolean if a field has been set.
func (o *OpenGraphUser) HasSurname() bool {
	if o != nil && o.Surname.IsSet() {
		return true
	}

	return false
}

// SetSurname gets a reference to the given NullableString and assigns it to the Surname field.
func (o *OpenGraphUser) SetSurname(v string) {
	o.Surname.Set(&v)
}
// SetSurnameNil sets the value for Surname to be an explicit nil
func (o *OpenGraphUser) SetSurnameNil() {
	o.Surname.Set(nil)
}

// UnsetSurname ensures that no value is present for Surname, not even an explicit nil
func (o *OpenGraphUser) UnsetSurname() {
	o.Surname.Unset()
}

// GetUsageLocation returns the UsageLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetUsageLocation() string {
	if o == nil || o.UsageLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageLocation.Get()
}

// GetUsageLocationOk returns a tuple with the UsageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetUsageLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageLocation.Get(), o.UsageLocation.IsSet()
}

// HasUsageLocation returns a boolean if a field has been set.
func (o *OpenGraphUser) HasUsageLocation() bool {
	if o != nil && o.UsageLocation.IsSet() {
		return true
	}

	return false
}

// SetUsageLocation gets a reference to the given NullableString and assigns it to the UsageLocation field.
func (o *OpenGraphUser) SetUsageLocation(v string) {
	o.UsageLocation.Set(&v)
}
// SetUsageLocationNil sets the value for UsageLocation to be an explicit nil
func (o *OpenGraphUser) SetUsageLocationNil() {
	o.UsageLocation.Set(nil)
}

// UnsetUsageLocation ensures that no value is present for UsageLocation, not even an explicit nil
func (o *OpenGraphUser) UnsetUsageLocation() {
	o.UsageLocation.Unset()
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName.Get()
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPrincipalName.Get(), o.UserPrincipalName.IsSet()
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *OpenGraphUser) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given NullableString and assigns it to the UserPrincipalName field.
func (o *OpenGraphUser) SetUserPrincipalName(v string) {
	o.UserPrincipalName.Set(&v)
}
// SetUserPrincipalNameNil sets the value for UserPrincipalName to be an explicit nil
func (o *OpenGraphUser) SetUserPrincipalNameNil() {
	o.UserPrincipalName.Set(nil)
}

// UnsetUserPrincipalName ensures that no value is present for UserPrincipalName, not even an explicit nil
func (o *OpenGraphUser) UnsetUserPrincipalName() {
	o.UserPrincipalName.Unset()
}

// GetUserType returns the UserType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetUserType() string {
	if o == nil || o.UserType.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserType.Get()
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetUserTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserType.Get(), o.UserType.IsSet()
}

// HasUserType returns a boolean if a field has been set.
func (o *OpenGraphUser) HasUserType() bool {
	if o != nil && o.UserType.IsSet() {
		return true
	}

	return false
}

// SetUserType gets a reference to the given NullableString and assigns it to the UserType field.
func (o *OpenGraphUser) SetUserType(v string) {
	o.UserType.Set(&v)
}
// SetUserTypeNil sets the value for UserType to be an explicit nil
func (o *OpenGraphUser) SetUserTypeNil() {
	o.UserType.Set(nil)
}

// UnsetUserType ensures that no value is present for UserType, not even an explicit nil
func (o *OpenGraphUser) UnsetUserType() {
	o.UserType.Unset()
}

// GetAboutMe returns the AboutMe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetAboutMe() string {
	if o == nil || o.AboutMe.Get() == nil {
		var ret string
		return ret
	}
	return *o.AboutMe.Get()
}

// GetAboutMeOk returns a tuple with the AboutMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetAboutMeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AboutMe.Get(), o.AboutMe.IsSet()
}

// HasAboutMe returns a boolean if a field has been set.
func (o *OpenGraphUser) HasAboutMe() bool {
	if o != nil && o.AboutMe.IsSet() {
		return true
	}

	return false
}

// SetAboutMe gets a reference to the given NullableString and assigns it to the AboutMe field.
func (o *OpenGraphUser) SetAboutMe(v string) {
	o.AboutMe.Set(&v)
}
// SetAboutMeNil sets the value for AboutMe to be an explicit nil
func (o *OpenGraphUser) SetAboutMeNil() {
	o.AboutMe.Set(nil)
}

// UnsetAboutMe ensures that no value is present for AboutMe, not even an explicit nil
func (o *OpenGraphUser) UnsetAboutMe() {
	o.AboutMe.Unset()
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *OpenGraphUser) GetBirthday() time.Time {
	if o == nil || o.Birthday == nil {
		var ret time.Time
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphUser) GetBirthdayOk() (*time.Time, bool) {
	if o == nil || o.Birthday == nil {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *OpenGraphUser) HasBirthday() bool {
	if o != nil && o.Birthday != nil {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given time.Time and assigns it to the Birthday field.
func (o *OpenGraphUser) SetBirthday(v time.Time) {
	o.Birthday = &v
}

// GetDrive returns the Drive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphUser) GetDrive() AnyOfopenGraphDrive {
	if o == nil || o.Drive.Get() == nil {
		var ret AnyOfopenGraphDrive
		return ret
	}
	return *o.Drive.Get()
}

// GetDriveOk returns a tuple with the Drive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphUser) GetDriveOk() (*AnyOfopenGraphDrive, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Drive.Get(), o.Drive.IsSet()
}

// HasDrive returns a boolean if a field has been set.
func (o *OpenGraphUser) HasDrive() bool {
	if o != nil && o.Drive.IsSet() {
		return true
	}

	return false
}

// SetDrive gets a reference to the given NullableAnyOfopenGraphDrive and assigns it to the Drive field.
func (o *OpenGraphUser) SetDrive(v AnyOfopenGraphDrive) {
	o.Drive.Set(&v)
}
// SetDriveNil sets the value for Drive to be an explicit nil
func (o *OpenGraphUser) SetDriveNil() {
	o.Drive.Set(nil)
}

// UnsetDrive ensures that no value is present for Drive, not even an explicit nil
func (o *OpenGraphUser) UnsetDrive() {
	o.Drive.Unset()
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *OpenGraphUser) GetDrives() []OpenGraphDrive {
	if o == nil || o.Drives == nil {
		var ret []OpenGraphDrive
		return ret
	}
	return *o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphUser) GetDrivesOk() (*[]OpenGraphDrive, bool) {
	if o == nil || o.Drives == nil {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *OpenGraphUser) HasDrives() bool {
	if o != nil && o.Drives != nil {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []OpenGraphDrive and assigns it to the Drives field.
func (o *OpenGraphUser) SetDrives(v []OpenGraphDrive) {
	o.Drives = &v
}

func (o OpenGraphUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedOpenGraphDirectoryObject, errOpenGraphDirectoryObject := json.Marshal(o.OpenGraphDirectoryObject)
	if errOpenGraphDirectoryObject != nil {
		return []byte{}, errOpenGraphDirectoryObject
	}
	errOpenGraphDirectoryObject = json.Unmarshal([]byte(serializedOpenGraphDirectoryObject), &toSerialize)
	if errOpenGraphDirectoryObject != nil {
		return []byte{}, errOpenGraphDirectoryObject
	}
	if o.AccountEnabled.IsSet() {
		toSerialize["accountEnabled"] = o.AccountEnabled.Get()
	}
	if o.BusinessPhones != nil {
		toSerialize["businessPhones"] = o.BusinessPhones
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.CompanyName.IsSet() {
		toSerialize["companyName"] = o.CompanyName.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.Department.IsSet() {
		toSerialize["department"] = o.Department.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.FaxNumber.IsSet() {
		toSerialize["faxNumber"] = o.FaxNumber.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["givenName"] = o.GivenName.Get()
	}
	if o.LastPasswordChangeDateTime.IsSet() {
		toSerialize["lastPasswordChangeDateTime"] = o.LastPasswordChangeDateTime.Get()
	}
	if o.LegalAgeGroupClassification.IsSet() {
		toSerialize["legalAgeGroupClassification"] = o.LegalAgeGroupClassification.Get()
	}
	if o.Mail.IsSet() {
		toSerialize["mail"] = o.Mail.Get()
	}
	if o.MailNickname.IsSet() {
		toSerialize["mailNickname"] = o.MailNickname.Get()
	}
	if o.MobilePhone.IsSet() {
		toSerialize["mobilePhone"] = o.MobilePhone.Get()
	}
	if o.OfficeLocation.IsSet() {
		toSerialize["officeLocation"] = o.OfficeLocation.Get()
	}
	if o.PostalCode.IsSet() {
		toSerialize["postalCode"] = o.PostalCode.Get()
	}
	if o.PreferredLanguage.IsSet() {
		toSerialize["preferredLanguage"] = o.PreferredLanguage.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.StreetAddress.IsSet() {
		toSerialize["streetAddress"] = o.StreetAddress.Get()
	}
	if o.Surname.IsSet() {
		toSerialize["surname"] = o.Surname.Get()
	}
	if o.UsageLocation.IsSet() {
		toSerialize["usageLocation"] = o.UsageLocation.Get()
	}
	if o.UserPrincipalName.IsSet() {
		toSerialize["userPrincipalName"] = o.UserPrincipalName.Get()
	}
	if o.UserType.IsSet() {
		toSerialize["userType"] = o.UserType.Get()
	}
	if o.AboutMe.IsSet() {
		toSerialize["aboutMe"] = o.AboutMe.Get()
	}
	if o.Birthday != nil {
		toSerialize["birthday"] = o.Birthday
	}
	if o.Drive.IsSet() {
		toSerialize["drive"] = o.Drive.Get()
	}
	if o.Drives != nil {
		toSerialize["drives"] = o.Drives
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphUser struct {
	value *OpenGraphUser
	isSet bool
}

func (v NullableOpenGraphUser) Get() *OpenGraphUser {
	return v.value
}

func (v *NullableOpenGraphUser) Set(val *OpenGraphUser) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphUser) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphUser(val *OpenGraphUser) *NullableOpenGraphUser {
	return &NullableOpenGraphUser{value: val, isSet: true}
}

func (v NullableOpenGraphUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


