/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphDrive struct for OpenGraphDrive
type OpenGraphDrive struct {
	OpenGraphBaseItem
	// Describes the type of drive represented by this resource. Values are \"personal\" for users home spaces, \"projectSpace\" or \"shares\". Read-only.
	DriveType NullableString `json:"driveType,omitempty"`
	// Describes the status of the drive.
	OCDriveStatus *string `json:"oCDriveStatus,omitempty"`
	// Optional. The user account that owns the drive. Read-only.
	Owner NullableAnyOfopenGraphIdentitySet `json:"owner,omitempty"`
	// Optional. The user account that owns the drive.
	OCCoOwner NullableAnyOfopenGraphIdentitySet `json:"oCCoOwner,omitempty"`
	// Optional. Information about the drive's storage space quota. Read-only.
	Quota NullableAnyOfopenGraphQuota `json:"quota,omitempty"`
	// All items contained in the drive. Read-only. Nullable.
	Items *[]OpenGraphDriveItem `json:"items,omitempty"`
	// The root folder of the drive. Read-only.
	Root NullableAnyOfopenGraphDriveItem `json:"root,omitempty"`
}

// NewOpenGraphDrive instantiates a new OpenGraphDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphDrive() *OpenGraphDrive {
	this := OpenGraphDrive{}
	return &this
}

// NewOpenGraphDriveWithDefaults instantiates a new OpenGraphDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphDriveWithDefaults() *OpenGraphDrive {
	this := OpenGraphDrive{}
	return &this
}

// GetDriveType returns the DriveType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphDrive) GetDriveType() string {
	if o == nil || o.DriveType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveType.Get()
}

// GetDriveTypeOk returns a tuple with the DriveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphDrive) GetDriveTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveType.Get(), o.DriveType.IsSet()
}

// HasDriveType returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasDriveType() bool {
	if o != nil && o.DriveType.IsSet() {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given NullableString and assigns it to the DriveType field.
func (o *OpenGraphDrive) SetDriveType(v string) {
	o.DriveType.Set(&v)
}
// SetDriveTypeNil sets the value for DriveType to be an explicit nil
func (o *OpenGraphDrive) SetDriveTypeNil() {
	o.DriveType.Set(nil)
}

// UnsetDriveType ensures that no value is present for DriveType, not even an explicit nil
func (o *OpenGraphDrive) UnsetDriveType() {
	o.DriveType.Unset()
}

// GetOCDriveStatus returns the OCDriveStatus field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetOCDriveStatus() string {
	if o == nil || o.OCDriveStatus == nil {
		var ret string
		return ret
	}
	return *o.OCDriveStatus
}

// GetOCDriveStatusOk returns a tuple with the OCDriveStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetOCDriveStatusOk() (*string, bool) {
	if o == nil || o.OCDriveStatus == nil {
		return nil, false
	}
	return o.OCDriveStatus, true
}

// HasOCDriveStatus returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOCDriveStatus() bool {
	if o != nil && o.OCDriveStatus != nil {
		return true
	}

	return false
}

// SetOCDriveStatus gets a reference to the given string and assigns it to the OCDriveStatus field.
func (o *OpenGraphDrive) SetOCDriveStatus(v string) {
	o.OCDriveStatus = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphDrive) GetOwner() AnyOfopenGraphIdentitySet {
	if o == nil || o.Owner.Get() == nil {
		var ret AnyOfopenGraphIdentitySet
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphDrive) GetOwnerOk() (*AnyOfopenGraphIdentitySet, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableAnyOfopenGraphIdentitySet and assigns it to the Owner field.
func (o *OpenGraphDrive) SetOwner(v AnyOfopenGraphIdentitySet) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *OpenGraphDrive) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *OpenGraphDrive) UnsetOwner() {
	o.Owner.Unset()
}

// GetOCCoOwner returns the OCCoOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphDrive) GetOCCoOwner() AnyOfopenGraphIdentitySet {
	if o == nil || o.OCCoOwner.Get() == nil {
		var ret AnyOfopenGraphIdentitySet
		return ret
	}
	return *o.OCCoOwner.Get()
}

// GetOCCoOwnerOk returns a tuple with the OCCoOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphDrive) GetOCCoOwnerOk() (*AnyOfopenGraphIdentitySet, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OCCoOwner.Get(), o.OCCoOwner.IsSet()
}

// HasOCCoOwner returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasOCCoOwner() bool {
	if o != nil && o.OCCoOwner.IsSet() {
		return true
	}

	return false
}

// SetOCCoOwner gets a reference to the given NullableAnyOfopenGraphIdentitySet and assigns it to the OCCoOwner field.
func (o *OpenGraphDrive) SetOCCoOwner(v AnyOfopenGraphIdentitySet) {
	o.OCCoOwner.Set(&v)
}
// SetOCCoOwnerNil sets the value for OCCoOwner to be an explicit nil
func (o *OpenGraphDrive) SetOCCoOwnerNil() {
	o.OCCoOwner.Set(nil)
}

// UnsetOCCoOwner ensures that no value is present for OCCoOwner, not even an explicit nil
func (o *OpenGraphDrive) UnsetOCCoOwner() {
	o.OCCoOwner.Unset()
}

// GetQuota returns the Quota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphDrive) GetQuota() AnyOfopenGraphQuota {
	if o == nil || o.Quota.Get() == nil {
		var ret AnyOfopenGraphQuota
		return ret
	}
	return *o.Quota.Get()
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphDrive) GetQuotaOk() (*AnyOfopenGraphQuota, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Quota.Get(), o.Quota.IsSet()
}

// HasQuota returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasQuota() bool {
	if o != nil && o.Quota.IsSet() {
		return true
	}

	return false
}

// SetQuota gets a reference to the given NullableAnyOfopenGraphQuota and assigns it to the Quota field.
func (o *OpenGraphDrive) SetQuota(v AnyOfopenGraphQuota) {
	o.Quota.Set(&v)
}
// SetQuotaNil sets the value for Quota to be an explicit nil
func (o *OpenGraphDrive) SetQuotaNil() {
	o.Quota.Set(nil)
}

// UnsetQuota ensures that no value is present for Quota, not even an explicit nil
func (o *OpenGraphDrive) UnsetQuota() {
	o.Quota.Unset()
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *OpenGraphDrive) GetItems() []OpenGraphDriveItem {
	if o == nil || o.Items == nil {
		var ret []OpenGraphDriveItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphDrive) GetItemsOk() (*[]OpenGraphDriveItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []OpenGraphDriveItem and assigns it to the Items field.
func (o *OpenGraphDrive) SetItems(v []OpenGraphDriveItem) {
	o.Items = &v
}

// GetRoot returns the Root field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenGraphDrive) GetRoot() AnyOfopenGraphDriveItem {
	if o == nil || o.Root.Get() == nil {
		var ret AnyOfopenGraphDriveItem
		return ret
	}
	return *o.Root.Get()
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenGraphDrive) GetRootOk() (*AnyOfopenGraphDriveItem, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Root.Get(), o.Root.IsSet()
}

// HasRoot returns a boolean if a field has been set.
func (o *OpenGraphDrive) HasRoot() bool {
	if o != nil && o.Root.IsSet() {
		return true
	}

	return false
}

// SetRoot gets a reference to the given NullableAnyOfopenGraphDriveItem and assigns it to the Root field.
func (o *OpenGraphDrive) SetRoot(v AnyOfopenGraphDriveItem) {
	o.Root.Set(&v)
}
// SetRootNil sets the value for Root to be an explicit nil
func (o *OpenGraphDrive) SetRootNil() {
	o.Root.Set(nil)
}

// UnsetRoot ensures that no value is present for Root, not even an explicit nil
func (o *OpenGraphDrive) UnsetRoot() {
	o.Root.Unset()
}

func (o OpenGraphDrive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedOpenGraphBaseItem, errOpenGraphBaseItem := json.Marshal(o.OpenGraphBaseItem)
	if errOpenGraphBaseItem != nil {
		return []byte{}, errOpenGraphBaseItem
	}
	errOpenGraphBaseItem = json.Unmarshal([]byte(serializedOpenGraphBaseItem), &toSerialize)
	if errOpenGraphBaseItem != nil {
		return []byte{}, errOpenGraphBaseItem
	}
	if o.DriveType.IsSet() {
		toSerialize["driveType"] = o.DriveType.Get()
	}
	if o.OCDriveStatus != nil {
		toSerialize["oCDriveStatus"] = o.OCDriveStatus
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.OCCoOwner.IsSet() {
		toSerialize["oCCoOwner"] = o.OCCoOwner.Get()
	}
	if o.Quota.IsSet() {
		toSerialize["quota"] = o.Quota.Get()
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Root.IsSet() {
		toSerialize["root"] = o.Root.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphDrive struct {
	value *OpenGraphDrive
	isSet bool
}

func (v NullableOpenGraphDrive) Get() *OpenGraphDrive {
	return v.value
}

func (v *NullableOpenGraphDrive) Set(val *OpenGraphDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphDrive(val *OpenGraphDrive) *NullableOpenGraphDrive {
	return &NullableOpenGraphDrive{value: val, isSet: true}
}

func (v NullableOpenGraphDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


