/*
 * Open Graph API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenGraphFolderView struct for OpenGraphFolderView
type OpenGraphFolderView struct {
	// The method by which the folder should be sorted.
	SortBy *string `json:"sortBy,omitempty"`
	// If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
	SortOrder *string `json:"sortOrder,omitempty"`
	// The type of view that should be used to represent the folder.
	ViewType *string `json:"viewType,omitempty"`
}

// NewOpenGraphFolderView instantiates a new OpenGraphFolderView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenGraphFolderView() *OpenGraphFolderView {
	this := OpenGraphFolderView{}
	return &this
}

// NewOpenGraphFolderViewWithDefaults instantiates a new OpenGraphFolderView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenGraphFolderViewWithDefaults() *OpenGraphFolderView {
	this := OpenGraphFolderView{}
	return &this
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *OpenGraphFolderView) GetSortBy() string {
	if o == nil || o.SortBy == nil {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphFolderView) GetSortByOk() (*string, bool) {
	if o == nil || o.SortBy == nil {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *OpenGraphFolderView) HasSortBy() bool {
	if o != nil && o.SortBy != nil {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *OpenGraphFolderView) SetSortBy(v string) {
	o.SortBy = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *OpenGraphFolderView) GetSortOrder() string {
	if o == nil || o.SortOrder == nil {
		var ret string
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphFolderView) GetSortOrderOk() (*string, bool) {
	if o == nil || o.SortOrder == nil {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *OpenGraphFolderView) HasSortOrder() bool {
	if o != nil && o.SortOrder != nil {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given string and assigns it to the SortOrder field.
func (o *OpenGraphFolderView) SetSortOrder(v string) {
	o.SortOrder = &v
}

// GetViewType returns the ViewType field value if set, zero value otherwise.
func (o *OpenGraphFolderView) GetViewType() string {
	if o == nil || o.ViewType == nil {
		var ret string
		return ret
	}
	return *o.ViewType
}

// GetViewTypeOk returns a tuple with the ViewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenGraphFolderView) GetViewTypeOk() (*string, bool) {
	if o == nil || o.ViewType == nil {
		return nil, false
	}
	return o.ViewType, true
}

// HasViewType returns a boolean if a field has been set.
func (o *OpenGraphFolderView) HasViewType() bool {
	if o != nil && o.ViewType != nil {
		return true
	}

	return false
}

// SetViewType gets a reference to the given string and assigns it to the ViewType field.
func (o *OpenGraphFolderView) SetViewType(v string) {
	o.ViewType = &v
}

func (o OpenGraphFolderView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SortBy != nil {
		toSerialize["sortBy"] = o.SortBy
	}
	if o.SortOrder != nil {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if o.ViewType != nil {
		toSerialize["viewType"] = o.ViewType
	}
	return json.Marshal(toSerialize)
}

type NullableOpenGraphFolderView struct {
	value *OpenGraphFolderView
	isSet bool
}

func (v NullableOpenGraphFolderView) Get() *OpenGraphFolderView {
	return v.value
}

func (v *NullableOpenGraphFolderView) Set(val *OpenGraphFolderView) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenGraphFolderView) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenGraphFolderView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenGraphFolderView(val *OpenGraphFolderView) *NullableOpenGraphFolderView {
	return &NullableOpenGraphFolderView{value: val, isSet: true}
}

func (v NullableOpenGraphFolderView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenGraphFolderView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


